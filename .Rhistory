boxplot(CHARGES~STARTING.JOURNEY, data=bus_transport, col="red", notch=T)
#Colouring box plot and naming the axis
boxplot(CHARGES~STARTING.JOURNEY, data=bus_transport, col="red", notch=T,
main="Bus Station Vs Charges",
xlab="Bus Stations",
ylab="Charges"
)
#STACK BARS
barplot(table(bus_transport$STARTING.JOURNEY,bus_transport$CHARGES), col=c("Blue","yellow","Green","Red","Orange"))
#BAR PLOTS
barplot(table(bus_transport$STARTING.JOURNEY))
#BOX PLOT
boxplot(CHARGES~STARTING.JOURNEY, data=bus_transport, col="red", notch=T)
#Colouring box plot and naming the axis
boxplot(CHARGES~STARTING.JOURNEY, data=bus_transport, col="red", notch=T,
main="Bus Station Vs Charges",
xlab="Bus Stations",
ylab="Charges"
)
#STACK BARS
barplot(table(bus_transport$STARTING.JOURNEY,bus_transport$CHARGES), col=c("Blue","yellow","Green","Red","Orange"))
#Histogram
Histogram <- ggplot(bus_transport, aes(x=CHARGES)) +
geom_histogram(colour="blue", fill="red", binwidth=2) +
labs(title="Histogram Of Charges") +
labs(x="Charges") +
labs(y="Frequency Count")
library(ggplot2)
#Histogram
Histogram <- ggplot(bus_transport, aes(x=CHARGES)) +
geom_histogram(colour="blue", fill="red", binwidth=2) +
labs(title="Histogram Of Charges") +
labs(x="Charges") +
labs(y="Frequency Count")
Histogram
#Histogram
Histogram <- ggplot(bus_transport, aes(x=CHARGES)) +
geom_histogram(colour="blue", fill="red", binwidth=10) +
labs(title="Histogram Of Charges") +
labs(x="Charges") +
labs(y="Frequency Count")
Histogram
#Histogram
Histogram <- ggplot(bus_transport, aes(x=CHARGES)) +
geom_histogram(colour="blue", fill="red", binwidth=100) +
labs(title="Histogram Of Charges") +
labs(x="Charges") +
labs(y="Frequency Count")
Histogram
#Histogram
Histogram <- ggplot(bus_transport, aes(x=CHARGES)) +
geom_histogram(colour="blue", fill="red", binwidth=10) +
labs(title="Histogram Of Charges") +
labs(x="Charges") +
labs(y="Frequency Count")
Histogram
#Histogram
Histogram <- ggplot(bus_transport, aes(x=CHARGES)) +
geom_histogram(colour="blue", fill="red", binwidth=5) +
labs(title="Histogram Of Charges") +
labs(x="Charges") +
labs(y="Frequency Count")
Histogram
#Histogram
Histogram <- ggplot(bus_transport, aes(x=CHARGES)) +
geom_histogram(colour="blue", fill="red", binwidth=10) +
labs(title="Histogram Of Charges") +
labs(x="Charges") +
labs(y="Frequency Count")
Histogram
#Histogram
Histogram <- ggplot(bus_transport, aes(x=CHARGES)) +
geom_histogram(colour="blue", fill="red", binwidth=10) +
labs(title="Histogram Of Charges",x="Charges",y="Frequency Count")
Histogram
#Histogram
Histogram <- ggplot(bus_transport, aes(x=CHARGES)) +
geom_histogram(colour="blue", fill="red", binwidth=10) +
labs(title="Histogram Of Charges",x="Charges",y="Frequency Count")
Histogram
ggplot(bus_transport, aes(x=CHARGES)) +
geom_histogram(colour="blue", fill="red", binwidth=10) +
labs(title="Histogram Of Charges",x="Charges",y="Frequency Count")
#Scatterplot
ggplot(bus_transport, aes(x=STARTING.JOURNEY, y=CHARGES)) +
geom_point(shape=19, colour="blue", fill="blue") +
labs(title="Scatterplot Example") +
labs(x="Charges") +
labs(y="Starting Station")
#Scatterplot
ggplot(bus_transport, aes(x=STARTING.JOURNEY, y=CHARGES)) +
geom_point(shape=19, colour="blue") +
labs(title="Scatterplot Example") +
labs(x="Charges") +
labs(y="Starting Station")
#Scatterplot
ggplot(bus_transport, aes(x=STARTING.JOURNEY, y=CHARGES)) +
geom_point(shape=19, colour="red") +
labs(title="Scatterplot Example") +
labs(x="Charges") +
labs(y="Starting Station")
#Scatterplot
ggplot(bus_transport, aes(x=STARTING.JOURNEY, y=CHARGES)) +
geom_point(shape=19, colour="blue", fill="red") +
labs(title="Scatterplot Example") +
labs(x="Charges") +
labs(y="Starting Station")
#Scatterplot
ggplot(bus_transport, aes(x=STARTING.JOURNEY, y=CHARGES)) +
geom_point(shape=20, colour="blue", fill="red") +
labs(title="Scatterplot Example") +
labs(x="Charges") +
labs(y="Starting Station")
#Scatterplot
ggplot(bus_transport, aes(x=STARTING.JOURNEY, y=CHARGES)) +
geom_point(shape=200, colour="blue", fill="red") +
labs(title="Scatterplot Example") +
labs(x="Charges") +
labs(y="Starting Station")
#Scatterplot
ggplot(bus_transport, aes(x=STARTING.JOURNEY, y=CHARGES)) +
geom_point(shape=2, colour="blue", fill="red") +
labs(title="Scatterplot Example") +
labs(x="Charges") +
labs(y="Starting Station")
#Scatterplot
ggplot(bus_transport, aes(x=STARTING.JOURNEY, y=CHARGES)) +
geom_point(shape=15, colour="blue", fill="red") +
labs(title="Scatterplot Example") +
labs(x="Charges") +
labs(y="Starting Station")
#Scatterplot
ggplot(bus_transport, aes(x=STARTING.JOURNEY, y=CHARGES)) +
geom_point(shape=10, colour="blue", fill="red") +
labs(title="Scatterplot Example") +
labs(x="Charges") +
labs(y="Starting Station")
#Scatterplot
ggplot(bus_transport, aes(x=STARTING.JOURNEY, y=CHARGES)) +
geom_point(shape=19, colour="blue", fill="red") +
labs(title="Scatterplot Example") +
labs(x="Charges") +
labs(y="Starting Station")
#Scatterplot
ggplot(bus_transport, aes(x=STARTING.JOURNEY, y=CHARGES)) +
geom_point(shape=19, colour="blue") +
labs(title="Scatterplot Example") +
labs(x="Charges") +
labs(y="Starting Station")
#Scatterplot
ggplot(bus_transport, aes(x=STARTING.JOURNEY, y=CHARGES)) +
geom_point(shape=19, colour="blue") +
labs(title="Scatterplot Example") +
labs(x="Charges") +
labs(y="Starting Station")
#Scatterplot
ggplot(bus_transport, aes(x=STARTING.JOURNEY, y=CHARGES)) +
geom_point(shape=19, colour="blue") +
labs(title="Scatterplot Example") +
labs(x="Starting Station") +
labs(y="Charges")
#Histogram
Histogram <- ggplot(bus_transport, aes(x=CHARGES)) +
geom_histogram(colour="blue", fill="red", binwidth=10) +
labs(title="Histogram Of Charges",x="Charges",y="Frequency Count")
Histogram
#Scatterplot
ggplot(bus_transport, aes(x=STARTING.JOURNEY, y=CHARGES)) +
geom_point(shape=19, colour="blue", fill="blue") +
labs(title="Scatterplot Example") +
labs(x="Charges") +
labs(y="Starting Station")
#Boxplot
ggplot(bus_transport, aes(x=STARTING.JOURNEY, y=CHARGES)) +
geom_boxplot(aes(color=STARTING.JOURNEY, fill=STARTING.JOURNEY)) +
labs(title="Box Plot Example") +
labs(x="Bus Station") +
labs(y="Charges frequency")
#Bar Chart
ggplot(bus_transport, aes(x=STARTING.JOURNEY)) +
geom_bar(stat="count", aes(color=STARTING.JOURNEY, fill=STARTING.JOURNEY)) +
labs(title="Bar Chart for Bus Station distrbutions") +
labs(x="Number of Stations") +
labs(y="Frequency Count")
#Bar Chart
ggplot(bus_transport, aes(x=STARTING.JOURNEY)) +
geom_bar(aes(color=STARTING.JOURNEY, fill=STARTING.JOURNEY)) +
labs(title="Bar Chart for Bus Station distrbutions") +
labs(x="Number of Stations") +
labs(y="Frequency Count")
#Bar Chart
ggplot(bus_transport, aes(x=STARTING.JOURNEY)) +
geom_bar(stat="count", aes(color=STARTING.JOURNEY, fill=STARTING.JOURNEY)) +
labs(title="Bar Chart for Bus Station distrbutions") +
labs(x="Number of Stations") +
labs(y="Frequency Count")
#Bar Chart
ggplot(bus_transport, aes(x=STARTING.JOURNEY)) +
geom_bar(stat="count", aes(color=STARTING.JOURNEY, fill=STARTING.JOURNEY)) +
labs(title="Bar Chart for Bus Station distrbutions") +
labs(x="Number of Stations") +
labs(y="Frequency Count")
#Bar Chart
ggplot(bus_transport, aes(x=STARTING.JOURNEY)) +
geom_bar(stats="count", aes(color=STARTING.JOURNEY, fill=STARTING.JOURNEY)) +
labs(title="Bar Chart for Bus Station distrbutions") +
labs(x="Number of Stations") +
labs(y="Frequency Count")
#Horizontal Bar Chart
ggplot(bus_transport, aes(x=STARTING.JOURNEY)) +
geom_bar(stat="count", aes(color=STARTING.JOURNEY, fill=STARTING.JOURNEY)) +
labs(title="Horizontal Bar Chart Example") +
labs(x="Starting stations") +
labs(y="Frequency Count") +
coord_flip()
# Stacked Bar Charts
ggplot(bus_transport, aes(x=STARTING.JOURNEY, fill=ENDING.JOURNEY, color=ENDING.JOURNEY)) +
geom_bar(position="stack") +
labs(title="Stacked bar Example") +
labs(x="Stations") +
labs(y="Frequency Count")
# Stacked Bar Charts
ggplot(bus_transport, aes(x=STARTING.JOURNEY, fill=STARTING.JOURNEY, color=STARTING.JOURNEY)) +
geom_bar(position="stack") +
labs(title="Stacked bar Example") +
labs(x="Stations") +
labs(y="Frequency Count")
# Stacked Bar Charts
ggplot(bus_transport, aes(x=STARTING.JOURNEY, fill=ENDING.JOURNEY, color=ENDING.JOURNEY)) +
geom_bar(position="stack") +
labs(title="Stacked bar Example") +
labs(x="Stations") +
labs(y="Frequency Count")
#Group Bar Charts
ggplot(bus_transport, aes(x=STARTING.JOURNEY, fill=ENDING.JOURNEY, color=ENDING.JOURNEY)) +
geom_bar(position="dodge") +
labs(title="Grouped Bar Example") +
labs(x="Stations") +
labs(y="Frequency Count")
View(bus_transport)
#Plot function
plot(bus_transport[,3],type = "1",xlab = "time",ylab = "Charges",main = "Plot graph for charges",col="Red",lwd=2,ylim = c(10,100))
#Plot function
plot(bus_transport[,3],type = 1,xlab = "time",ylab = "Charges",main = "Plot graph for charges",col="Red",lwd=2,ylim = c(10,100))
#Plot function
plot(bus_transport[,3],type = "1",xlab = "time",ylab = "Charges",main = "Plot graph for charges",col="Red",lwd=2,ylim = c(10,100))
#Plot function
plot(bus_transport[,3],type = "1",lwd=2,xlab = "time",ylab = "Charges",main = "Plot graph for charges",col="Red",ylim = c(10,100))
#Plot function
plot(bus_transport[,3],type = "l",lwd=2,xlab = "time",ylab = "Charges",main = "Plot graph for charges",col="Red",ylim = c(10,100))
#Plot function
plot(bus_transport[,3],type = "l",lwd=3,xlab = "time",ylab = "Charges",main = "Plot graph for charges",col="Red",ylim = c(10,100))
#Plot function
plot(bus_transport[,3],type = "l",lwd=1,xlab = "time",ylab = "Charges",main = "Plot graph for charges",col="Red",ylim = c(10,100))
#Plot function
plot(bus_transport[,3],type = "l",lwd=2,xlab = "time",ylab = "Charges",main = "Plot graph for charges",col="Red",ylim = c(10,200))
#Plot function
plot(bus_transport[,3],type = "l",lwd=2,xlab = "time",ylab = "Charges",main = "Plot graph for charges",col="Red",ylim = c(0,200))
plot(diff(log(bus_transport[,3],type="l")))
#qq plot
qqnorm(diff(bus_transport[,3]))
#qq plot
qqnorm(bus_transport[,3])
x<-diff(log(bus_transport[,3]))
ks.test(x,"pnorm",mean(x),sd(x))
mtry <- try(tuneRF(dt[, -3], dat3[,3], ntreeTry=100, stepFactor=1.5,improve=0.01))
if (!inherits(mtry, "try-error")) {
best.m <- mtry[mtry[, 2] == min(mtry[, 2]), 1]
rf <- randomForest(ID~.,data=dt, mtry=best.m, importance=TRUE, ntree=1000)
} else {
rf <- randomForest(ID~.,data=dt, importance=TRUE, ntree=1000)
}
a <- factor(c(2, 4, 3, 3, 4))
str(a)
a2 = as.numeric(as.character(a))
str(a2)
data = read.table(text="
X Y Z
6 5 0
6 3 NA
6 1 5
8 5 3
1 NA 1
8 7 2
2 0 2", header=TRUE)
View(data)
apply(data, 1, max)
apply(data, 1, max, na.rm = TRUE)
apply(data, 1, mean)
apply(data, 1, mean, na.rm = TRUE)
apply(data == 0, 1, sum, na.rm= TRUE)
apply(data > 5, 1,  sum, na.rm= TRUE)
df = data[apply(data, 1, mean, na.rm = TRUE)>=4,]
helper = apply(data, 1, function(x){any(is.na(x))})
helper = apply(data, 1, function(x)
{
any(is.na(x))
})
df2 = data[!helper,]
View(df)
df3 = apply(data,1, function(x) length(unique(na.omit(x))))
df3
set.seed(456)
mydata <- data.frame(a=letters[1:5], x=runif(5,10,50), y=sample(5), z=rnorm(5))
View(mydata)
df = subset(mydata, select = -c(x,z) )
View(df)
df <- mydata[ -c(1,3:4) ]
View(df)
keeps <- c("x","z")
df = mydata[keeps]
View(df)
library(dplyr)
mydata2 = select(mydata, -1, -3:-4)
View(mydata2)
mydata2 = select(mydata, -a, -x, -y)
View(mydata2)
mydata2 = select(mydata, -c(a, x, y))
mydata2 = select(mydata, -a:-y)
mydata = read.table(text="
INC_A SAC_A INC_B ASD_A
2 1 5 12
3 4 2 13
", header=TRUE)
mydata1 = mydata[,grepl("^INC",names(mydata))]
View(mydata1)
mydata1 = mydata[,!grepl("^INC",names(mydata))]
View(mydata1)
mydata12 = mydata[,grepl("_A$",names(mydata))]
View(mydata12)
View(df)
df= data.frame(x=c(1,2,3,NA,NA), y=c(5,NA,3,NA,NA), Z=c(5,3,3,4,NA))
df = df[,!sapply(df, function(x) mean(is.na(x)))>0.5]
View(df)
KeepDrop(data=mydata,cols="a x", newdata=dt, drop=0)
View(mydata)
KeepDrop(data=mydata,cols="a x", newdata=dt, drop=1)
KeepDrop = function(data=df,cols="var",newdata=df2,drop=1) {
# Double Quote Output Dataset Name
t = deparse(substitute(newdata))
# Drop Columns
if(drop == 1){
newdata = data [ , !(names(data) %in% scan(textConnection(cols), what="", sep=" "))]}
# Keep Columns
else {
newdata = data [ , names(data) %in% scan(textConnection(cols), what="", sep=" ")]}
assign(t, newdata, .GlobalEnv)
}
KeepDrop(data=mydata,cols="a x", newdata=dt, drop=0)
View(dt)
View(dt)
KeepDrop(data=mydata,cols="a x", newdata=dt, drop=1)
View(dt)
library(clusterGeneration)
install.packages("clusterGeneration")
install.packages("clusterGeneration")
library(clusterGeneration)
S = genPositiveDefMat("unifcorrmat",dim=15)
View(S)
#create 15 features using multivariate normal distribution for 5000 datapoints
library(mnormt)
install.packages("mnormt")
library(mnormt)
n = 5000
X = rmnorm(n,varcov=S$Sigma)
View(S)
View(X)
# Create a two class dependent variable using binomial distribution
Y = rbinom(n,size=1,prob=0.3)
data = data.frame(Y,X)
View(data)
cor(data,data$Y)
# Importing the dataset
dataset = read.csv('E:/R lang/MACHINE LEARNING/Decision_Tree_Classification/Social_Network_Ads.csv')
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
install.packages(c("e1071", "ElemStatLearn"))
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
# Importing the dataset
dataset = read.csv('D:/Final LP1/Data Analytics/Naive_Bayes/Social_Network_Ads.csv')
dataset = dataset[3:5]
View(dataset)
# Importing the dataset
dataset1 = read.csv('D:/Final LP1/Data Analytics/Naive_Bayes/Social_Network_Ads.csv')
dataset = dataset1[3:5]
View(dataset)
# Splitting the dataset into the Training set and Test set
install.packages('caTools')
library(caTools)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
View(dataset)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
View(training_set)
# Feature Scaling
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
View(test_set)
# Fitting SVM to the Training set
install.packages('e1071')
library(e1071)
classifier = naiveBayes(x = training_set[-3],
y = training_set$Purchased)
View(classifier)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-3])
y_pred
# Making the Confusion Matrix
cm = table(test_set[, 3], y_pred)
# Encoding the target feature as factor
dataset$Purchased = factor(dataset$Purchased, levels = c(0, 1))
class(dataset$Purchased)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-3])
y_pred
# Making the Confusion Matrix
cm = table(test_set[, 3], y_pred)
View(dataset)
# Encoding the target feature as factor
dataset$Purchased = factor(dataset$Purchased, levels = c(0, 1))
class(dataset$Purchased)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
View(dataset1)
classifier = naiveBayes(x = training_set[-3],
y = training_set$Purchased)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-3])
y_pred
# Making the Confusion Matrix
cm = table(test_set[, 3], y_pred)
cm
install.packages("ggplot2")
library(ggplot2)
colbind <- cbind(X1, Y1, new="1")
colbind <- cbind(Purchased, y_pred)
colbind <- cbind(dataset$Purchased, y_pred)
View(colbind)
library(ggplot2)
ggplot()+
geom_point(aes(x=training_set$EstimatedSalary,y=training_set$Purchased),colour="red")+
geom_line(aes(x=training_set$EstimatedSalary,y=predict(classifier, newdata = training_set[-3]),colour="blue"))
ggplot()+
geom_point(aes(x=dataset$EstimatedSalary,y=dataset$Purchased),colour="red")+
geom_line(aes(x=dataset$EstimatedSalary,y=predict(classifier, newdata = training_set[-3]),colour="blue"))
a <- factor(c(2, 4, 3, 3, 4))
str(a)
a2 = as.numeric(as.character(a))
str(a2)
setwd("F:\\Personal\\R lang\\Rshiny\\renderPlot")
library(shiny)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
hist(iris[,3])
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
col
col<-as.numeric("input$selectip")
col
col
runApp()
setwd("F:\\Personal\\R lang\\Rshiny\\renderPlot")
library(shiny)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("F:\\Personal\\R lang\\Rshiny\\Download plot")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
